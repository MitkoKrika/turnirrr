import { checkAuth } from './auth.js';

checkAuth();

document.addEventListener('DOMContentLoaded', () => {
  loadDashboard();
  attachProfileFormHandler();
  attachPasswordFormHandler(); // üëà –¥–æ–±–∞–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞
  attachAvatarFormHandler(); // üëà –¥–æ–±–∞–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
});

async function loadDashboard() {
  const token = localStorage.getItem('token');
  if (!token) {
    window.location.href = '/login.html';
    return;
  }

  try {
    const response = await fetch('/api/auth/me', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    const result = await response.json();

    if (!result.success) throw new Error('–ù–µ–≤–∞–ª–∏–¥–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞');

    const user = result.data;

    document.getElementById('dashboard-username').textContent = user.username;
    document.getElementById('dashboard-email').textContent = user.email;
    document.getElementById('dashboard-role').textContent = user.role;
    document.getElementById('dashboard-name').textContent = `${user.firstName} ${user.lastName}`;

    document.getElementById('firstName').value = user.firstName || '';
    document.getElementById('lastName').value = user.lastName || '';
    document.getElementById('email').value = user.email || '';
    document.getElementById('phone').value = user.phone || '';
    document.getElementById('discord').value = user.discord || '';
    document.getElementById('current-avatar').src = user.avatar || '/img/default-avatar.png';

  } catch (err) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—Ç–µ –¥–∞–Ω–Ω–∏:', err);
    window.location.href = '/login.html';
  }
}

function attachProfileFormHandler() {
  const form = document.getElementById('profile-form');
  const message = document.getElementById('form-message');

  if (!form) {
    console.error('‚ùå Form with ID #profile-form not found');
    return;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const token = localStorage.getItem('token');

    const updateData = {
      firstName: document.getElementById('firstName').value,
      lastName: document.getElementById('lastName').value,
      email: document.getElementById('email').value,
      phone: document.getElementById('phone').value,
      discord: document.getElementById('discord').value,
    };

    try {
      const res = await fetch('/api/auth/me', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(updateData)
      });

      const result = await res.json();

      if (result.success) {
        message.textContent = '‚úÖ –ü—Ä–æ–º–µ–Ω–∏—Ç–µ —Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ.';
        message.style.color = 'green';
      } else {
        throw new Error(result.message || '–ù–µ—É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å');
      }

    } catch (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å:', err);
      message.textContent = '‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å.';
      message.style.color = 'red';
    }
  });
}

function attachPasswordFormHandler() {
  const form = document.getElementById('password-form');
  const message = document.getElementById('password-message');

  if (!form) {
    console.warn('‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç–∞ –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞.');
    return;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const currentPassword = document.getElementById('current-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;

    if (newPassword !== confirmPassword) {
      message.textContent = '‚ùå –ù–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç.';
      message.style.color = 'red';
      return;
    }

    const token = localStorage.getItem('token');

    try {
      const res = await fetch('/api/auth/change-password', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ currentPassword, newPassword })
      });

      const result = await res.json();

      if (result.success) {
        message.textContent = '‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞.';
        message.style.color = 'green';
        form.reset();
      } else {
        message.textContent = `‚ùå ${result.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞—Ç–∞.'}`;
        message.style.color = 'red';
      }
    } catch (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞:', err);
      message.textContent = '‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞.';
      message.style.color = 'red';
    }
  });
}

function attachAvatarFormHandler() {
  console.log('üì¶ –°—Ç–∞—Ä—Ç–∏—Ä–∞ attachAvatarFormHandler');

  const avatarForm = document.getElementById('avatar-form');
  const avatarInput = document.getElementById('avatar-upload');
  const avatarPreview = document.getElementById('avatar-preview');
  const currentAvatar = document.getElementById('current-avatar');

  if (!avatarForm || !avatarInput) {
    console.error('‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω avatar-form –∏–ª–∏ avatar-upload');
    return;
  }

  let selectedFile = null; // üîê —Å—ä—Ö—Ä–∞–Ω—è–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—è —Ñ–∞–π–ª –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ—Ç–æ

  avatarInput.addEventListener('change', (e) => {
    selectedFile = e.target.files[0];
    console.log('üì∑ –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ñ–∞–π–ª:', selectedFile);

    if (selectedFile) {
      const reader = new FileReader();
      reader.onload = (event) => {
        avatarPreview.src = event.target.result;
      };
      reader.readAsDataURL(selectedFile);
    }
  });

  avatarForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    console.log('üì§ –ó–∞–ø–æ—á–≤–∞ submit...');
    console.log('üß™ fileInput:', avatarInput);

    console.log('üß™ –ò–∑–±—Ä–∞–Ω —Ñ–∞–π–ª:', selectedFile);

    if (!selectedFile) {
      alert('‚ùó –ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
      return;
    }

    const token = localStorage.getItem('token');
    const formData = new FormData();
    formData.append('avatar', selectedFile);

    try {
      const res = await fetch('/api/auth/upload-avatar', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });

      const result = await res.json();
      console.log('üì© –û—Ç–≥–æ–≤–æ—Ä –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞:', result);

      if (result.success) {
        currentAvatar.src = result.avatar;
        alert('‚úÖ –ê–≤–∞—Ç–∞—Ä—ä—Ç –µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–µ–Ω!');
      } else {
        alert(`‚ùå –ì—Ä–µ—à–∫–∞: ${result.message}`);
      }
    } catch (err) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ fetch:', err);
      alert('‚ùå –í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä.');
    }
  });
}