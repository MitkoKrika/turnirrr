document.addEventListener('DOMContentLoaded', () => {
    const dashboard = document.getElementById('dashboard');
    const tournamentsSection = document.getElementById('tournaments');
    const teamsSection = document.getElementById('teams');
    const registrationsSection = document.getElementById('registrations');
    const newsSection = document.getElementById('news');
    const settingsSection = document.getElementById('settings');
    const addTournamentBtn = document.getElementById('add-tournament');
    const addNewsBtn = document.getElementById('add-news');
    const addUserBtn = document.getElementById('add-user');
    const tournamentModal = document.getElementById('tournament-modal');
    const teamModal = document.getElementById('team-modal');
    const newsModal = document.getElementById('news-modal');
    const userModal = document.getElementById('user-modal');
    const tournamentForm = document.getElementById('tournament-form');
    const teamForm = document.getElementById('team-form');
    const newsForm = document.getElementById('news-form');
    const userForm = document.getElementById('user-form');
    const closeModalButtons = document.querySelectorAll('.close-modal');
    const navLinks = document.querySelectorAll('.admin-nav a');
    const tabButtons = document.querySelectorAll('.settings-tabs .tab-btn');
    const teamFilter = document.getElementById('team-filter');
    const registrationFilter = document.getElementById('registration-filter');
    const searchInput = document.getElementById('admin-search');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('token');
    //if (!token) window.location.href = '/login.html';
    if (token && dashboard) {
        showDashboard();
    }

    if (window.location.hash === '#news') {
        loadNews();
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const section = link.getAttribute('href');
            
            if (section === '#logout') {
                // Handle logout
                return;
            }
    
            // Update active states
            navLinks.forEach(l => l.classList.remove('active'));
            link.classList.add('active');
            
            document.querySelectorAll('.content-section').forEach(s => {
                s.classList.remove('active');
            });
            
            const activeSection = document.querySelector(section);
            if (activeSection) {
                activeSection.classList.add('active');
                
                // Load data when specific sections are clicked
                if (section === '#news') {
                    loadNews();
                } else if (section === '#tournaments') {
                    loadTournaments();
                }
                // Add other sections as needed
            }
        });
    });

    // –¢–∞–±–æ–≤–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    tabButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            tabButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.querySelector(`#${btn.dataset.tab}`).classList.add('active');
        });
    });

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–∞–±–ª–æ—Ç–æ
    function showDashboard() {
        dashboard.classList.add('active');
        initNavigation();
        initModals();
        initFilters();
        loadDashboardStats();
        loadTournaments();
        loadTeams();
        loadRegistrations();
        loadNews();
        loadUsers();
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–∞–±–ª–æ—Ç–æ
    async function fetchData(endpoint) {
        try {
            const response = await fetch(`/api/admin${endpoint}`, {
                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
            });
            return await response.json();
        } catch (error) {
            console.error('Fetch error:', error);
            return [];
        }
    }

    async function loadDashboardStats() {
        try {
            const stats = await fetchData('/stats');
            const response = await fetch('/api/admin/stats', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const stats = await response.json();
                document.getElementById('active-tournaments').textContent = stats.activeTournaments;
                document.getElementById('registered-teams').textContent = stats.totalTeams;
                document.getElementById('registered-teams').textContent = stats.registeredTeams;
                document.getElementById('new-registrations').textContent = stats.newRegistrations;
                document.getElementById('new-registrations').textContent = stats.pendingRegistrations;
                document.getElementById('new-messages').textContent = stats.newMessages;

                // –ü—Ä–∏–º–µ—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
                const activityList = document.getElementById('activity-list');
                activityList.innerHTML = `
                    <div class="activity-item">–ù–æ–≤ —Ç—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–µ–Ω: CS:GO Summer Cup</div>
                    <div class="activity-item">–û—Ç–±–æ—Ä Team Alpha —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω</div>
                    <div class="activity-item">–ù–æ–≤–∏–Ω–∞ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–∞: –¢—É—Ä–Ω–∏—Ä 2025</div>
                `;
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ:', error);
        }
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏
    async function loadTournaments() {
        try {
            const response = await fetch('/api/admin/tournaments', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const tournaments = await fetchData('/tournaments');
                renderTournaments(tournaments);
            } else {
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ');
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ:', error);
        }
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏
    function renderTournaments(tournaments) {
        const tbody = document.getElementById('tournaments-table');
        tbody.innerHTML = tournaments.map(t => `
            <tr>
                <td>${t._id}</td>
                <td>${t.name}</td>
                <td>${new Date(t.date).toLocaleDateString('bg-BG')}</td>
                <td><span class="status-badge ${t.status}">${t.status}</span></td>
                <td>${t.teams.length}</td>
                <td>
                    <button class="btn btn-edit" onclick="openEditTournament('${t._id}')">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="deleteTournament('${t._id}')">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏
    async function loadTeams() {
        const teams = await fetchData('/teams');
        renderTeams(teams);
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏
    function renderTeams(teams) {
        const tbody = document.getElementById('teams-table');
        tbody.innerHTML = teams.map(t => `
            <tr>
                <td>${t._id}</td>
                <td>${t.name}</td>
                <td>${t.captain}</td>
                <td>${t.players.join(', ')}</td>
                <td><span class="status-badge ${t.status}">${t.status}</span></td>
                <td>
                    <button class="btn btn-edit" onclick="openEditTeam('${t._id}')">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="deleteTeam('${t._id}')">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async function loadRegistrations() {
        try {
            const response = await fetch('/api/admin/registrations', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const registrations = await response.json();
                renderRegistrations(registrations);
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏—Ç–µ:', error);
        }
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    function renderRegistrations(registrations) {
        const filter = registrationFilter.value;
        const searchTerm = searchInput.value.toLowerCase();
        let filteredRegistrations = registrations;
        if (filter !== 'all') {
            filteredRegistrations = registrations.filter(r => r.status === filter);
        }
        filteredRegistrations = filteredRegistrations.filter(r => r.teamName.toLowerCase().includes(searchTerm));

        const pending = filteredRegistrations.filter(r => r.status === 'pending');
        const approved = filteredRegistrations.filter(r => r.status === 'approved');

        registrationsSection.querySelector('#pending-count').textContent = pending.length;
        registrationsSection.querySelector('#approved-count').textContent = approved.length;

        registrationsSection.querySelector('#pending-registrations').innerHTML = pending.map(r => `
            <div class="registration-item">
                <h4>${r.teamName}</h4>
                <p>–ö–∞–ø–∏—Ç–∞–Ω: ${r.captain}</p>
                <p>–¢—É—Ä–Ω–∏—Ä: ${r.tournamentName}</p>
                <div class="registration-actions">
                    <button class="btn btn-approve" onclick="approveRegistration('${r._id}')">–û–¥–æ–±—Ä–∏</button>
                    <button class="btn btn-reject" onclick="rejectRegistration('${r._id}')">–û—Ç—Ö–≤—ä—Ä–ª–∏</button>
                </div>
            </div>
        `).join('');

        registrationsSection.querySelector('#approved-registrations').innerHTML = approved.map(r => `
            <div class="registration-item">
                <h4>${r.teamName}</h4>
                <p>–ö–∞–ø–∏—Ç–∞–Ω: ${r.captain}</p>
                <p>–¢—É—Ä–Ω–∏—Ä: ${r.tournamentName}</p>
                <div class="registration-actions">
                    <button class="btn btn-delete" onclick="deleteRegistration('${r._id}')">–ò–∑—Ç—Ä–∏–π</button>
                </div>
            </div>
        `).join('');
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∏
    async function loadNews() {
        try {
            const response = await fetch('/api/news/admin', {
                headers: { 
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            // Check if we got valid data
            if (result && Array.isArray(result.data)) {
                renderNews(result.data);
            } else {
                console.error('Invalid data format:', result);
                document.getElementById('news-table').innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center">–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –Ω–æ–≤–∏–Ω–∏</td>
                    </tr>
                `;
            }
        } catch (error) {
            console.error('Error loading news:', error);
            document.getElementById('news-table').innerHTML = `
                <tr>
                    <td colspan="5" class="text-center error">–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∏—Ç–µ</td>
                </tr>
            `;
        }
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∏
    function renderNews(newsItems) {
        const tbody = document.getElementById('news-table');
        
        if (!newsItems || newsItems.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center">–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –Ω–æ–≤–∏–Ω–∏</td>
                </tr>
            `;
            return;
        }
    
        tbody.innerHTML = newsItems.map(news => `
            <tr>
                <td>${news._id}</td>
                <td>${news.title}</td>
                <td>${formatDate(news.createdAt)}</td>
                <td>${news.author || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}</td>
                <td class="actions">
                    <button class="btn btn-edit" onclick="editNews('${news._id}')">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-delete" onclick="deleteNews('${news._id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `).join('');
    }

    function formatDate(dateString) {
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return new Date(dateString).toLocaleDateString('bg-BG', options);
    }

    async function saveNews(newsData) {
        try {
            const response = await fetch('/api/news', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(newsData)
            });
    
            if (response.ok) {
                // Refresh the news list after successful save
                await loadNews();
                return true;
            } else {
                const error = await response.json();
                throw new Error(error.message || 'Failed to save news');
            }
        } catch (error) {
            console.error('Error saving news:', error);
            alert(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: ${error.message}`);
            return false;
        }
    }

    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    async function loadUsers() {
        try {
            const response = await fetch('/api/admin/users', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const users = await response.json();
                renderUsers(users);
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ:', error);
        }
    }

    // –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    function renderUsers(users) {
        const table = document.querySelector('#users-table');
        const searchTerm = searchInput.value.toLowerCase();
        table.innerHTML = users
            .filter(u => u.username.toLowerCase().includes(searchTerm))
            .map(u => `
                <tr>
                    <td>${u._id}</td>
                    <td>${u.username}</td>
                    <td>${u.role}</td>
                    <td>${u.status || '–ê–∫—Ç–∏–≤–µ–Ω'}</td>
                    <td>
                        <button class="btn btn-edit" onclick="editUser('${u._id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π</button>
                        <button class="btn btn-delete" onclick="deleteUser('${u._id}')">–ò–∑—Ç—Ä–∏–π</button>
                    </td>
                </tr>
            `).join('');
    }

    function initNavigation() {
        document.querySelectorAll('.admin-nav a').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
                document.querySelector(link.getAttribute('href')).classList.add('active');
            });
        });
    }

    function initModals() {
        document.getElementById('add-tournament').addEventListener('click', () => {
            document.getElementById('tournament-form').reset();
            document.getElementById('modal-title').textContent = '–î–æ–±–∞–≤–∏ –Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä';
            document.getElementById('tournament-modal').style.display = 'block';
        });
    
        document.getElementById('add-news').addEventListener('click', () => {
            document.getElementById('news-form').reset();
            document.getElementById('news-modal-title').textContent = '–î–æ–±–∞–≤–∏ –Ω–æ–≤–∏–Ω–∞';
            document.getElementById('news-modal').style.display = 'block';
        });

        document.getElementById('news-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const newsData = {
                title: document.getElementById('news-title').value,
                content: document.getElementById('news-content').value,
                imageurl: document.getElementById('news-image').value || '/api/placeholder/400/250'
            };
            
            const id = document.getElementById('news-id').value;
            const isEdit = !!id;
            
            try {
                const response = await fetch(isEdit ? `/api/news/${id}` : '/api/news', {
                    method: isEdit ? 'PUT' : 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(newsData)
                });
        
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to save news');
                }
        
                // Close modal and refresh news list
                document.getElementById('news-modal').style.display = 'none';
                document.getElementById('news-form').reset();
                await loadNews();
                
                alert(`–ù–æ–≤–∏–Ω–∞—Ç–∞ –µ ${isEdit ? '—Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–∞' : '–¥–æ–±–∞–≤–µ–Ω–∞'} —É—Å–ø–µ—à–Ω–æ!`);
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ:', error);
                alert(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: ${error.message}`);
            }
        });
    
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
            });
        });
    }

    // –¢—ä—Ä—Å–µ–Ω–µ
    searchInput.addEventListener('input', () => {
        loadTournaments();
        loadTeams();
        loadRegistrations();
        loadNews();
        loadUsers();
    });

    // –§–∏–ª—Ç—Ä–∏
    teamFilter.addEventListener('change', loadTeams);
    registrationFilter.addEventListener('change', loadRegistrations);

    // –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∏
    if (addTournamentBtn) {
        addTournamentBtn.addEventListener('click', () => {
            document.getElementById('modal-title').textContent = '–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ —Ç—É—Ä–Ω–∏—Ä';
            tournamentForm.reset();
            document.getElementById('tournament-id').value = '';
            tournamentModal.style.display = 'block';
        });
    }

    if (addNewsBtn) {
        addNewsBtn.addEventListener('click', () => {
            document.getElementById('news-modal-title').textContent = '–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞';
            newsForm.reset();
            document.getElementById('news-id').value = '';
            newsModal.style.display = 'block';
        });
    }

    if (addUserBtn) {
        addUserBtn.addEventListener('click', () => {
            document.getElementById('user-modal-title').textContent = '–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª';
            userForm.reset();
            document.getElementById('user-id').value = '';
            userModal.style.display = 'block';
        });
    }

    // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∏
    closeModalButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            tournamentModal.style.display = 'none';
            teamModal.style.display = 'none';
            newsModal.style.display = 'none';
            userModal.style.display = 'none';
        });
    });

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    if (tournamentForm) {
        tournamentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const tournament = {
                name: document.getElementById('tournament-name').value,
                date: document.getElementById('tournament-date').value,
                location: document.getElementById('tournament-location').value,
                game: document.getElementById('tournament-game').value,
                teams: parseInt(document.getElementById('tournament-teams').value),
                prize: parseInt(document.getElementById('tournament-prize').value),
                description: document.getElementById('tournament-desc').value
            };
            const id = document.getElementById('tournament-id').value;

            try {
                const url = id ? `/api/admin/tournaments/${id}` : '/api/admin/tournaments';
                const method = id ? 'PUT' : 'POST';
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(tournament)
                });

                if (response.ok) {
                    tournamentModal.style.display = 'none';
                    loadTournaments();
                    loadDashboardStats();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ:', error);
            }
        });
    }

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä
    if (teamForm) {
        teamForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const team = {
                name: document.getElementById('team-name').value,
                captain: document.getElementById('team-captain').value,
                players: document.getElementById('team-players').value.split(',').map(p => p.trim()).filter(p => p),
                status: document.getElementById('team-status').value
            };
            const id = document.getElementById('team-id').value;

            try {
                const url = id ? `/api/admin/teams/${id}` : '/api/admin/teams';
                const method = id ? 'PUT' : 'POST';
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(team)
                });

                if (response.ok) {
                    teamModal.style.display = 'none';
                    loadTeams();
                    loadDashboardStats();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∞');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ:', error);
            }
        });
    }

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞
    if (newsForm) {
        newsForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const newsData = {
                title: document.getElementById('news-title').value,
                content: document.getElementById('news-content').value,
                imageurl: document.getElementById('news-image').value || '/api/placeholder/400/250'
            };
            
            const id = document.getElementById('news-id').value;
            const url = id ? `/api/news/${id}` : '/api/news';
            const method = id ? 'PUT' : 'POST';
    
            try {
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(newsData)
                });
    
                if (response.ok) {
                    newsModal.style.display = 'none';
                    loadNews(); // Refresh news list in admin
                    alert('–ù–æ–≤–∏–Ω–∞—Ç–∞ –µ –∑–∞–ø–∞–∑–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                } else {
                    const errorData = await response.json();
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: ' + (errorData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'));
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ:', error);
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞');
            }
        });
    }

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    if (userForm) {
        userForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const user = {
                username: document.getElementById('user-username').value,
                password: document.getElementById('user-password').value,
                role: document.getElementById('user-role').value
            };
            const id = document.getElementById('user-id').value;

            try {
                const url = id ? `/api/admin/users/${id}` : '/api/admin/users';
                const method = id ? 'PUT' : 'POST';
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(user)
                });

                if (response.ok) {
                    userModal.style.display = 'none';
                    loadUsers();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ:', error);
            }
        });
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    window.editTournament = async (id) => {
        try {
            const response = await fetch(`/api/admin/tournaments/${id}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const tournament = await response.json();
                document.getElementById('modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä';
                document.getElementById('tournament-id').value = tournament._id;
                document.getElementById('tournament-name').value = tournament.name;
                document.getElementById('tournament-date').value = new Date(tournament.date).toISOString().slice(0, 16);
                document.getElementById('tournament-location').value = tournament.location;
                document.getElementById('tournament-game').value = tournament.game;
                document.getElementById('tournament-teams').value = tournament.teams;
                document.getElementById('tournament-prize').value = tournament.prize;
                document.getElementById('tournament-desc').value = tournament.description;
                tournamentModal.style.display = 'block';
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
        }
    };

    // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    window.deleteTournament = async (id) => {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ —Ç—É—Ä–Ω–∏—Ä?')) {
            try {
                const response = await fetch(`/api/admin/tournaments/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    loadTournaments();
                    loadDashboardStats();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', error);
            }
        }
    };

    // –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä
    window.editTeam = async (id) => {
        try {
            const response = await fetch(`/api/admin/teams/${id}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const team = await response.json();
                document.getElementById('team-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä';
                document.getElementById('team-id').value = team._id;
                document.getElementById('team-name').value = team.name;
                document.getElementById('team-captain').value = team.captain;
                document.getElementById('team-players').value = team.players.join(', ');
                document.getElementById('team-status').value = team.status;
                teamModal.style.display = 'block';
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∞:', error);
        }
    };

    // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä
    window.deleteTeam = async (id) => {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ –æ—Ç–±–æ—Ä?')) {
            try {
                const response = await fetch(`/api/admin/teams/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    loadTeams();
                    loadDashboardStats();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', error);
            }
        }
    };

    // –û–¥–æ–±—Ä—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    window.approveRegistration = async (id) => {
        try {
            const response = await fetch(`/api/admin/registrations/${id}/approve`, {
                method: 'PUT',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                loadRegistrations();
                loadDashboardStats();
            } else {
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä—è–≤–∞–Ω–µ');
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä—è–≤–∞–Ω–µ:', error);
        }
    };

    // –û—Ç—Ö–≤—ä—Ä–ª—è–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    window.rejectRegistration = async (id) => {
        try {
            const response = await fetch(`/api/admin/registrations/${id}/reject`, {
                method: 'PUT',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                loadRegistrations();
                loadDashboardStats();
            } else {
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç—Ö–≤—ä—Ä–ª—è–Ω–µ');
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç—Ö–≤—ä—Ä–ª—è–Ω–µ:', error);
        }
    };

    // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    window.deleteRegistration = async (id) => {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–∞–∑–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è?')) {
            try {
                const response = await fetch(`/api/admin/registrations/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    loadRegistrations();
                    loadDashboardStats();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', error);
            }
        }
    };

    // –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞
    window.editNews = async (id) => {
        try {
            const response = await fetch(`/api/news/${id}`, {
                headers: { 
                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                    'Content-Type': 'application/json'
                }
            });
    
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
    
            const news = await response.json();
            
            // Make sure the response contains the expected data
            if (!news || !news._id) {
                throw new Error('Invalid news data received');
            }
    
            // Populate the edit form
            document.getElementById('news-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞';
            document.getElementById('news-id').value = news._id;
            document.getElementById('news-title').value = news.title;
            document.getElementById('news-content').value = news.content;
            document.getElementById('news-image').value = news.imageurl || '';
            
            // Show the modal
            document.getElementById('news-modal').style.display = 'block';
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞—Ç–∞:', error);
            alert(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞—Ç–∞: ${error.message}`);
        }
    };

    // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞
    window.deleteNews = async (id) => {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–∞–∑–∏ –Ω–æ–≤–∏–Ω–∞?')) {
            try {
                const response = await fetch(`/api/news/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    loadNews();
                    alert('–ù–æ–≤–∏–Ω–∞—Ç–∞ –µ –∏–∑—Ç—Ä–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ!');
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', error);
                alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∏–Ω–∞—Ç–∞');
            }
        }
    };

    // –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    window.editUser = async (id) => {
        try {
            const response = await fetch(`/api/admin/users/${id}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (response.ok) {
                const user = await response.json();
                document.getElementById('user-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª';
                document.getElementById('user-id').value = user._id;
                document.getElementById('user-username').value = user.username;
                document.getElementById('user-password').value = '';
                document.getElementById('user-role').value = user.role;
                userModal.style.display = 'block';
            }
        } catch (error) {
            console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:', error);
        }
    };

    // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    window.deleteUser = async (id) => {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª?')) {
            try {
                const response = await fetch(`/api/admin/users/${id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    loadUsers();
                } else {
                    alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ');
                }
            } catch (error) {
                console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ:', error);
            }
        }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('general-settings')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        alert('–û–±—â–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ (—Å–∏–º—É–ª–∞—Ü–∏—è)');
    });

    document.getElementById('email-settings')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        alert('–ò–º–µ–π–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ (—Å–∏–º—É–ª–∞—Ü–∏—è)');
    });

    document.getElementById('security-settings')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ (—Å–∏–º—É–ª–∞—Ü–∏—è)');
    });
});