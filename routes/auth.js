const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { verifyToken } = require('../midleware/authMiddleware');
const multer = require('multer');
const path = require('path');

router.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });

    if (!user) {
        console.log('‚ùå –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω:', username);
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    // DEBUG: –õ–æ–≥–≤–∞–º–µ –ø–∞—Ä–æ–ª–∏—Ç–µ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    console.log('üü° –í—ä–≤–µ–¥–µ–Ω–∞ –ø–∞—Ä–æ–ª–∞:', password);
    console.log('üü° –•–µ—à–∏—Ä–∞–Ω–∞ –ø–∞—Ä–æ–ª–∞ –æ—Ç –±–∞–∑–∞—Ç–∞:', user.password);

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
        console.log('‚ùå –ü–∞—Ä–æ–ª–∞—Ç–∞ –Ω–µ —Å—ä–≤–ø–∞–¥–∞!');
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª–∞—Ç–∞ —Å—ä–≤–ø–∞–¥–∞. –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ —Å –∏–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ token');

    const token = jwt.sign(
        { username, role: user.role },
        process.env.TOKEN_SECRET,
        { expiresIn: '1h' }
    );

    res.json({ token });
});

router.get('/me', verifyToken, async (req, res) => {
  try {
    const user = await User.findOne({ username: req.user.username }).select('-password');
    if (!user) return res.status(404).json({ message: 'User not found' });

    res.json({ success: true, data: user });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server error' });
  }
});

router.put('/me', verifyToken, async (req, res) => {
  try {
    console.log('üì¶ –î–∞–Ω–Ω–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', req.body);

    const updateFields = req.body;

    const updatedUser = await User.findOneAndUpdate(
      { username: req.user.username },
      updateFields,
      { new: true, runValidators: true }
    ).select('-password');

    if (!updatedUser) {
      return res.status(404).json({ message: 'User not found' });
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:', updatedUser);
    res.json({ success: true, data: updatedUser });
  } catch (err) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

router.put('/change-password', verifyToken, async (req, res) => {
  const { currentPassword, newPassword } = req.body;
  const username = req.user.username;

  try {
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ success: false, message: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.' });

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) return res.status(401).json({ success: false, message: '–ù–µ–≤–∞–ª–∏–¥–Ω–∞ —Ç–µ–∫—É—â–∞ –ø–∞—Ä–æ–ª–∞.' });

    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedNewPassword;
    await user.save();

    res.json({ success: true, message: '–ü–∞—Ä–æ–ª–∞—Ç–∞ –µ —Å–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.' });
  } catch (err) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞:', err);
    res.status(500).json({ success: false, message: '–°—ä—Ä–≤—ä—Ä–Ω–∞ –≥—Ä–µ—à–∫–∞.' });
  }
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ Multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../public/uploads/'));
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    cb(null, `${req.user.username}_avatar${ext}`);
  }
});

const upload = multer({
  storage,
  limits: { fileSize: 2 * 1024 * 1024 }, // 2MB
  fileFilter: (req, file, cb) => {
    const allowed = ['image/jpeg', 'image/png'];
    if (!allowed.includes(file.mimetype)) {
      return cb(new Error('–ü–æ–∑–≤–æ–ª–µ–Ω–∏ —Å–∞ —Å–∞–º–æ PNG –∏–ª–∏ JPEG —Ñ–∞–π–ª–æ–≤–µ'));
    }
    cb(null, true);
  }
});

router.post(
  '/upload-avatar',
  verifyToken,                      // üîπ –ü—ä—Ä–≤–æ –¥–µ–∫–æ–¥–∏—Ä–∞–º–µ —Ç–æ–∫–µ–Ω–∞
  upload.single('avatar'),         // üîπ –°–ª–µ–¥ —Ç–æ–≤–∞ –ø—Ä–∏–µ–º–∞–º–µ —Ñ–∞–π–ª–∞
  async (req, res) => {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', req.file);

    if (!req.file) {
      return res.status(400).json({ success: false, message: '–§–∞–π–ª—ä—Ç –ª–∏–ø—Å–≤–∞' });
    }

    const avatarPath = `/uploads/${req.file.filename}`;

    const user = await User.findOneAndUpdate(
      { username: req.user.username },
      { avatar: avatarPath },
      { new: true }
    );

    res.json({ success: true, avatar: avatarPath });
  }
);

router.use((req, res, next) => {
  console.log('üì© POST –∑–∞—è–≤–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω–∞ –¥–æ routes/auth.js:', req.method, req.originalUrl);
  next();
});

router.use((req, res, next) => {
  console.log(`‚û°Ô∏è ${req.method} ${req.originalUrl}`);
  next();
});

module.exports = router;